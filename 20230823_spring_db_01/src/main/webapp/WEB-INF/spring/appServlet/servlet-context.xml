<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" /> <!-- view resolver -->
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	<!-- base는 저것이고 그것을 기반으로 앞에걸 지정하겠다. 설정들이 다 됨(new해서 만들 필요x) -->
	<context:component-scan base-package="kh.lclass.db1" />
	
	<!-- @Aspect AOP annotation scan 쏵 긁어주겠다~-->
	<aop:aspectj-autoproxy/> 

<!-- 방법 2 
	<beans:bean class="kh.lclass.db1.common.AdviceLogXml" id="adviceXml"/>
	<aop:config>
		<aop:pointcut  id="daoPointCut" expression="execution(public * kh.lclass.db1..*Dao.*(..))"/>
		<aop:pointcut  id="servicePointCut" expression="execution(public * kh.lclass.db1..*Service.*(..))"/>
		<aop:pointcut  id="controllerPointCut" expression="execution(public * kh.lclass.db1..*Controller.*(..))"/>
		<aop:aspect ref="adviceLogXml">
			<aop:around method="aroundDaoLog" pointcut-ref="daoPointCut"/>
			<aop:around method="aroundSrvLog" pointcut-ref="servicePointCut"/>
			<aop:around method="aroundCtrLog" pointcut-ref="controllerPointCut"/>
		</aop:aspect>
	</aop:config>
-->
	
	<!-- 빈 여러개 만들기 가능(테스트),객체, @으로 만드는 경우(vo) 굳이,,, 이걸 만들 필요가 없다 -->
<!-- 
	<beans:bean class="kh.lcalss.db1.member.model.vo.MemberVo" id="MemberVo1">
		<beans:property name="mname" value="홍갈동" />
	</beans:bean>
-->

	<!-- Interceptor 인터셉터  -->
	<!-- Interceptor 로그인 객체 생성  -->
	<beans:bean class="kh.lclass.db1.common.LoginInterceptor" id="LoginInterceptor"/>
	<interceptors>
		<!-- Interceptor 로그인 설정  -->
        <interceptor>
        	<mapping path="/**/"/> <!-- **모든 것 (2개 걍 적어야된대 -->
       		<exclude-mapping path="/resources/**"/>
       		<exclude-mapping path="/login"/>
       		<exclude-mapping path="/singup"/>
       		<exclude-mapping path="/findid"/>
       		<exclude-mapping path="/findpwd"/>
       		<exclude-mapping path="/shop/**"/> <!-- shop이라고 시작하는 것들은 인터셉터로 안 걸겠다.  -->
       		<beans:ref bean="LoginInterceptor"/>
        </interceptor>           	
	</interceptors>














</beans:beans>
